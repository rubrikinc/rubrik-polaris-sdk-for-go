// Code generated by queries_gen.go DO NOT EDIT

// MIT License
//
// Copyright (c) 2021 Rubrik
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package azure

// addAzureCloudAccountExocomputeConfigurations GraphQL query
var addAzureCloudAccountExocomputeConfigurationsQuery = `mutation SdkGolangAddAzureCloudAccountExocomputeConfigurations($cloudAccountId: UUID!, $azureExocomputeRegionConfigs: [AzureExocomputeAddConfigInputType!]!) {
    result: addAzureCloudAccountExocomputeConfigurations(input: {
        cloudAccountId: $cloudAccountId, azureExocomputeRegionConfigs: $azureExocomputeRegionConfigs
    }) {
        configs {
            configUuid
            isPolarisManaged
            message
            region
            subnetNativeId
        }
    }
}`

// addAzureCloudAccountWithoutOauth GraphQL query
var addAzureCloudAccountWithoutOauthQuery = `mutation SdkGolangAddAzureCloudAccountWithoutOauth($tenantDomainName: String!, $azureCloudType: AzureCloudTypeEnum!, $regions: [AzureCloudAccountRegionEnum!]!, $features: [CloudAccountFeatureEnum!]!, $subscriptions: [AzureSubscriptionInput!]!, $policyVersion: Int!) {
    result: addAzureCloudAccountWithoutOAuth(input: {
        tenantDomainName: $tenantDomainName,
        azureCloudType:   $azureCloudType,
        features:         $features,
        subscriptions:    $subscriptions,
        regions:          $regions,
        policyVersion:    $policyVersion
    }) {
        tenantId
        status {
            azureSubscriptionRubrikId
            azureSubscriptionNativeId
            error
        }
    }
}`

// allAzureCloudAccountTenants GraphQL query
var allAzureCloudAccountTenantsQuery = `query SdkGolangAllAzureCloudAccountTenants($feature: CloudAccountFeatureEnum!, $includeSubscriptionDetails: Boolean!) {
    result: allAzureCloudAccountTenants(feature: $feature, includeSubscriptionDetails: $includeSubscriptionDetails) {
        cloudType
        azureCloudAccountTenantRubrikId
        domainName
        subscriptionCount
        subscriptions {
            id
            name
            nativeId
            featureDetail {
                feature
                status
                regions
            }
        }
    }
}`

// allAzureExocomputeConfigsInAccount GraphQL query
var allAzureExocomputeConfigsInAccountQuery = `query SdkGolangAllAzureExocomputeConfigsInAccount($cloudAccountIDs: [UUID!], $azureExocomputeSearchQuery: String!) {
    result: allAzureExocomputeConfigsInAccount(cloudAccountIDs: $cloudAccountIDs, azureExocomputeSearchQuery: $azureExocomputeSearchQuery) {
        azureCloudAccount {
            id
            name
            nativeId
            featureDetail {
                feature
                regions
                status
            }
        }
        configs {
            configUuid
            isPolarisManaged
            message
            region
            subnetNativeId
        }
        exocomputeEligibleRegions
        featureDetails {
            feature
            regions
            status
        }
    }
}`

// azureCloudAccountPermissionConfig GraphQL query
var azureCloudAccountPermissionConfigQuery = `query SdkGolangAzureCloudAccountPermissionConfig($feature: CloudAccountFeatureEnum!) {
    azureCloudAccountPermissionConfig(feature: $feature) {
        permissionVersion
        rolePermissions {
            excludedActions
            excludedDataActions
            includedActions
            includedDataActions
        }
    }
}`

// azureCloudAccountTenant GraphQL query
var azureCloudAccountTenantQuery = `query SdkGolangAzureCloudAccountTenant($tenantId: UUID!, $feature: CloudAccountFeatureEnum!, $subscriptionSearchText: String!) {
    result: azureCloudAccountTenant(tenantId: $tenantId, feature: $feature, subscriptionSearchText: $subscriptionSearchText, subscriptionStatusFilters: []) {
        cloudType
        azureCloudAccountTenantRubrikId
        clientId
        domainName
        subscriptions {
            id
            name
            nativeId
            featureDetail {
                feature
                regions
                status
            }
        }
    }
}`

// azureNativeSubscriptions GraphQL query
var azureNativeSubscriptionsQuery = `query SdkGolangAzureNativeSubscriptions($filter: String = "") {
    result: azureNativeSubscriptions(subscriptionFilters: {
        nameSubstringFilter: {
            nameSubstring: $filter
        }
    }) {
        count
        edges {
            node {
                id
                azureSubscriptionNativeId
                name
                azureSubscriptionStatus
                slaAssignment
                configuredSlaDomain{
                    id
                    name
                }
                effectiveSlaDomain{
                    id
                    name
                }
            }
        }
        pageInfo {
            endCursor
            hasNextPage
        }
    }
}`

// deleteAzureCloudAccountExocomputeConfigurations GraphQL query
var deleteAzureCloudAccountExocomputeConfigurationsQuery = `mutation SdkGolangDeleteAzureCloudAccountExocomputeConfigurations($cloudAccountIds: [UUID!]!) {
    result: deleteAzureCloudAccountExocomputeConfigurations(input: {
        cloudAccountIds: $cloudAccountIds
    }) {
        deletionFailedIds
        deletionSuccessIds
    }
}`

// deleteAzureCloudAccountWithoutOauth GraphQL query
var deleteAzureCloudAccountWithoutOauthQuery = `mutation SdkGolangDeleteAzureCloudAccountWithoutOauth($subscriptionIds: [UUID!]!, $features: [CloudAccountFeatureEnum!]!) {
    result: deleteAzureCloudAccountWithoutOAuth(input: {
        azureSubscriptionRubrikIds: $subscriptionIds
        features:                   $features,
    }) {
        status {
            azureSubscriptionNativeId
            isSuccess
            error
        }
    }
}`

// deleteAzureCloudAccountWithoutOauthV0 GraphQL query
var deleteAzureCloudAccountWithoutOauthV0Query = `mutation SdkGolangDeleteAzureCloudAccountWithoutOauthV0($subscriptionIds: [UUID!]!, $feature: CloudAccountFeatureEnum!) {
    result: deleteAzureCloudAccountWithoutOAuth(input: {
        azureSubscriptionRubrikIds: $subscriptionIds
        feature:                    $feature,
    }) {
        status {
            azureSubscriptionNativeId
            isSuccess
            error
        }
    }
}`

// setAzureCloudAccountCustomerAppCredentials GraphQL query
var setAzureCloudAccountCustomerAppCredentialsQuery = `mutation SdkGolangSetAzureCloudAccountCustomerAppCredentials($azureCloudType: AzureCloudTypeEnum!, $appId: String!, $appName: String, $appSecretKey: String!, $appTenantId: String, $tenantDomainName: String) {
    result: setAzureCloudAccountCustomerAppCredentials(input: {
        appId:            $appId,
        appSecretKey:     $appSecretKey,
        appTenantId:      $appTenantId,
        appName:          $appName,
        tenantDomainName: $tenantDomainName,
        azureCloudType:   $azureCloudType
    })
}`

// startDisableAzureNativeSubscriptionProtectionJob GraphQL query
var startDisableAzureNativeSubscriptionProtectionJobQuery = `mutation SdkGolangStartDisableAzureNativeSubscriptionProtectionJob($azureSubscriptionRubrikId: UUID!, $shouldDeleteNativeSnapshots: Boolean!) {
    result: startDisableAzureNativeSubscriptionProtectionJob(input: {
        azureSubscriptionRubrikId:   $azureSubscriptionRubrikId,
        shouldDeleteNativeSnapshots: $shouldDeleteNativeSnapshots
    }) {
         jobId
     }
 }`

// updateAzureCloudAccount GraphQL query
var updateAzureCloudAccountQuery = `mutation SdkGolangUpdateAzureCloudAccount($features: [CloudAccountFeatureEnum!]!, $regionsToAdd: [AzureCloudAccountRegionEnum!], $regionsToRemove: [AzureCloudAccountRegionEnum!], $subscriptions: [AzureCloudAccountSubscriptionInput!]!) {
    result: updateAzureCloudAccount(input: {
        features:        $features,
        regionsToAdd:    $regionsToAdd,
        regionsToRemove: $regionsToRemove,
        subscriptions:   $subscriptions
    }) {
        status {
            azureSubscriptionNativeId
            isSuccess
        }
    }
}`

// updateAzureCloudAccountV0 GraphQL query
var updateAzureCloudAccountV0Query = `mutation SdkGolangUpdateAzureCloudAccountV0($feature: CloudAccountFeatureEnum!, $regionsToAdd: [AzureCloudAccountRegionEnum!], $regionsToRemove: [AzureCloudAccountRegionEnum!], $subscriptions: [AzureCloudAccountSubscriptionInput!]!) {
    result: updateAzureCloudAccount(input: {
        feature:         $feature,
        regionsToAdd:    $regionsToAdd,
        regionsToRemove: $regionsToRemove,
        subscriptions:   $subscriptions
    }) {
        status {
            azureSubscriptionNativeId
            isSuccess
        }
    }
}`
