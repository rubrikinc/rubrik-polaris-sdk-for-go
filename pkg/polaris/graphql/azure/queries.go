// Code generated by queries_gen.go DO NOT EDIT.

// MIT License
//
// Copyright (c) 2021 Rubrik
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package azure

// addAzureCloudAccountExocomputeConfigurations GraphQL query
var addAzureCloudAccountExocomputeConfigurationsQuery = `mutation SdkGolangAddAzureCloudAccountExocomputeConfigurations($cloudAccountId: UUID!, $azureExocomputeRegionConfigs: [AzureExocomputeAddConfigInputType!]!) {
    result: addAzureCloudAccountExocomputeConfigurations(input: {
        cloudAccountId: $cloudAccountId, azureExocomputeRegionConfigs: $azureExocomputeRegionConfigs
    }) {
        configs {
            configUuid
            isRscManaged
            message
            region
            subnetNativeId
        }
    }
}`

// addAzureCloudAccountWithoutOauth GraphQL query
var addAzureCloudAccountWithoutOauthQuery = `mutation SdkGolangAddAzureCloudAccountWithoutOauth($tenantDomainName: String!, $azureCloudType: AzureCloudType!, $regions: [AzureCloudAccountRegion!]!, $feature: AddAzureCloudAccountFeatureInputWithoutOauth!, $subscriptionName: String!, $subscriptionId: String!) {
    result: addAzureCloudAccountWithoutOauth(input: {
        tenantDomainName: $tenantDomainName,
        azureCloudType:   $azureCloudType,
        subscriptions: {
            subscription: {
                name:     $subscriptionName,
                nativeId: $subscriptionId
            }
            features: [$feature]
        },
        regions: $regions,
    }) {
        tenantId
        status {
            azureSubscriptionRubrikId
            azureSubscriptionNativeId
            error
        }
    }
}`

// allAzureCloudAccountTenants GraphQL query
var allAzureCloudAccountTenantsQuery = `query SdkGolangAllAzureCloudAccountTenants($feature: CloudAccountFeature!, $includeSubscriptionDetails: Boolean!) {
    result: allAzureCloudAccountTenants(feature: $feature, includeSubscriptionDetails: $includeSubscriptionDetails) {
        cloudType
        azureCloudAccountTenantRubrikId
        clientId
        appName
        domainName
        subscriptionCount
        subscriptions {
            id
            name
            nativeId
            featureDetail {
                feature
                status
                regions
                resourceGroup {
                    name
                    nativeId
                    region
                    tags {
                        key
                        value
                    }
                }
                userAssignedManagedIdentity {
                    name
                    nativeId
                    principalId
                }
            }
        }
    }
}`

// allAzureExocomputeConfigsInAccount GraphQL query
var allAzureExocomputeConfigsInAccountQuery = `query SdkGolangAllAzureExocomputeConfigsInAccount($cloudAccountIDs: [UUID!], $azureExocomputeSearchQuery: String!) {
    result: allAzureExocomputeConfigsInAccount(cloudAccountIDs: $cloudAccountIDs, azureExocomputeSearchQuery: $azureExocomputeSearchQuery) {
        azureCloudAccount {
            id
            name
            nativeId
            featureDetail {
                feature
                regions
                status
            }
        }
        configs {
            configUuid
            healthCheckStatus {
                failureReason
                lastUpdatedAt
                status
                taskchainId
            }
            isRscManaged
            message
            podOverlayNetworkCidr
            podSubnetNativeId
            region
            subnetNativeId
        }
        exocomputeEligibleRegions
        featureDetails {
            feature
            regions
            status
        }
    }
}`

// allTargetMappings GraphQL query
var allTargetMappingsQuery = `query SdkGolangAllTargetMappings($filter: [TargetMappingFilterInput!]) {
    result: allTargetMappings(sortBy: NAME, sortOrder: ASC, filter: $filter) {
        id
        name
        groupType
        targetType
        connectionStatus {
            status
        }
        targetTemplate {
            ... on AzureTargetTemplate {
                cloudAccount {
                    cloudAccountId
                }
                cloudNativeCompanion {
                    cloudNativeLocTemplateType
                    cmkInfo {
                        keyName
                        keyVaultName
                        region
                    }
                    redundancy
                    storageAccountRegion
                    storageAccountTags {
                        key
                        value
                    }
                    storageTier
                    subscriptionNativeId
                }
                containerNamePrefix
                storageAccountName
            }
        }
    }
}`

// azureCloudAccountPermissionConfig GraphQL query
var azureCloudAccountPermissionConfigQuery = `query SdkGolangAzureCloudAccountPermissionConfig($feature: CloudAccountFeature!) {
    result: azureCloudAccountPermissionConfig(feature: $feature) {
        permissionVersion
        permissionsGroupVersions {
            permissionsGroup
            version
        }
        resourceGroupRolePermissions {
            excludedActions
            excludedDataActions
            includedActions
            includedDataActions
        }
        rolePermissions {
            excludedActions
            excludedDataActions
            includedActions
            includedDataActions
        }
    }
}`

// azureNativeSubscriptions GraphQL query
var azureNativeSubscriptionsQuery = `query SdkGolangAzureNativeSubscriptions($after: String, $filter: String!) {
    result: azureNativeSubscriptions(after: $after, subscriptionFilters: {
        nameSubstringFilter: {
            nameSubstring: $filter
        }
    }) {
        count
        edges {
            node {
                id
                azureSubscriptionNativeId
                name
                azureSubscriptionStatus
                slaAssignment
                configuredSlaDomain {
                    id
                    name
                }
                effectiveSlaDomain {
                    id
                    name
                }
            }
        }
        pageInfo {
            endCursor
            hasNextPage
        }
    }
}`

// createCloudNativeAzureStorageSetting GraphQL query
var createCloudNativeAzureStorageSettingQuery = `mutation SdkGolangCreateCloudNativeAzureStorageSetting(
    $cloudAccountId:             UUID!,
    $cloudNativeLocTemplateType: CloudNativeLocTemplateType!,
    $cmkInfo:                    [AzureCmkInput!],
    $containerName:              String!,
    $name:                       String!,
    $redundancy:                 AzureRedundancy!,
    $storageTier:                AzureStorageTier!,
    $subscriptionNativeId:       String!
    $storageAccountName:         String!,
    $storageAccountRegion:       AzureRegion,
    $storageAccountTags:         TagsInput,
) {
    result: createCloudNativeAzureStorageSetting(input: {
        cloudAccountId:              $cloudAccountId,
        cloudNativeLocTemplateType:  $cloudNativeLocTemplateType,
        cmkInfo:                     $cmkInfo,
        containerName:               $containerName,
        name:                        $name,
        redundancy:                  $redundancy,
        storageTier:                 $storageTier,
        subscriptionNativeId:        $subscriptionNativeId
        storageAccountName:          $storageAccountName,
        storageAccountRegion:        $storageAccountRegion,
        storageAccountTags:          $storageAccountTags,
    }) {
        targetMapping {
            id
        }
    }
}`

// deleteAzureCloudAccountExocomputeConfigurations GraphQL query
var deleteAzureCloudAccountExocomputeConfigurationsQuery = `mutation SdkGolangDeleteAzureCloudAccountExocomputeConfigurations($cloudAccountIds: [UUID!]!) {
    result: deleteAzureCloudAccountExocomputeConfigurations(input: {
        cloudAccountIds: $cloudAccountIds
    }) {
        deletionFailedIds
        deletionSuccessIds
    }
}`

// deleteAzureCloudAccountWithoutOauth GraphQL query
var deleteAzureCloudAccountWithoutOauthQuery = `mutation SdkGolangDeleteAzureCloudAccountWithoutOauth($subscriptionIds: [UUID!]!, $features: [CloudAccountFeature!]!) {
    result: deleteAzureCloudAccountWithoutOauth(input: {
        azureSubscriptionRubrikIds: $subscriptionIds
        features:                   $features,
    }) {
        status {
            azureSubscriptionNativeId
            isSuccess
            error
        }
    }
}`

// mapAzureCloudAccountExocomputeSubscription GraphQL query
var mapAzureCloudAccountExocomputeSubscriptionQuery = `mutation SdkGolangMapAzureCloudAccountExocomputeSubscription($exocomputeCloudAccountId: UUID!, $cloudAccountIds: [UUID!]!) {
    result: mapAzureCloudAccountExocomputeSubscription(input: {
        exocomputeCloudAccountId: $exocomputeCloudAccountId,
        cloudAccountIds:          $cloudAccountIds
    }) {
        isSuccess
    }
}`

// setAzureCloudAccountCustomerAppCredentials GraphQL query
var setAzureCloudAccountCustomerAppCredentialsQuery = `mutation SdkGolangSetAzureCloudAccountCustomerAppCredentials($azureCloudType: AzureCloudType!, $appId: String!, $appName: String, $appSecretKey: String!, $appTenantId: String, $tenantDomainName: String, $shouldReplace: Boolean!) {
    result: setAzureCloudAccountCustomerAppCredentials(input: {
        appId:            $appId,
        appSecretKey:     $appSecretKey,
        appTenantId:      $appTenantId,
        appName:          $appName,
        tenantDomainName: $tenantDomainName,
        shouldReplace:    $shouldReplace,
        azureCloudType:   $azureCloudType
    })
}`

// startDisableAzureCloudAccountJob GraphQL query
var startDisableAzureCloudAccountJobQuery = `mutation SdkGolangStartDisableAzureCloudAccountJob($cloudAccountId: UUID!, $feature: CloudAccountFeature!) {
  result: startDisableAzureCloudAccountJob(input: {
    feature:         $feature,
    cloudAccountIds: [$cloudAccountId],
  }) {
    jobIds {
      jobId
    }
    errors {
      error
    }
  }
}`

// startDisableAzureNativeSubscriptionProtectionJob GraphQL query
var startDisableAzureNativeSubscriptionProtectionJobQuery = `mutation SdkGolangStartDisableAzureNativeSubscriptionProtectionJob($azureSubscriptionRubrikId: UUID!, $shouldDeleteNativeSnapshots: Boolean!, $azureNativeProtectionFeature: AzureNativeProtectionFeature!) {
    result: startDisableAzureNativeSubscriptionProtectionJob(input: {
        azureSubscriptionRubrikId:    $azureSubscriptionRubrikId,
        shouldDeleteNativeSnapshots:  $shouldDeleteNativeSnapshots,
        azureNativeProtectionFeature: $azureNativeProtectionFeature,
    }) {
         jobId
     }
 }`

// unmapAzureCloudAccountExocomputeSubscription GraphQL query
var unmapAzureCloudAccountExocomputeSubscriptionQuery = `mutation SdkGolangUnmapAzureCloudAccountExocomputeSubscription($cloudAccountIds: [UUID!]!) {
    result: unmapAzureCloudAccountExocomputeSubscription(input: {
        cloudAccountIds: $cloudAccountIds
    }) {
      isSuccess
    }
}`

// updateAzureCloudAccount GraphQL query
var updateAzureCloudAccountQuery = `mutation SdkGolangUpdateAzureCloudAccount($features: [CloudAccountFeature!]!, $regionsToAdd: [AzureCloudAccountRegion!], $regionsToRemove: [AzureCloudAccountRegion!], $subscriptions: [AzureCloudAccountSubscriptionInput!]!) {
    result: updateAzureCloudAccount(input: {
        features:        $features,
        regionsToAdd:    $regionsToAdd,
        regionsToRemove: $regionsToRemove,
        subscriptions:   $subscriptions
    }) {
        status {
            azureSubscriptionNativeId
            isSuccess
        }
    }
}`

// updateCloudNativeAzureStorageSetting GraphQL query
var updateCloudNativeAzureStorageSettingQuery = `mutation SdkGolangUpdateCloudNativeAzureStorageSetting(
    $id:                 UUID!,
    $name:               String!,
    $storageTier:        AzureStorageTier!,
    $storageAccountTags: TagsInput!,
    $cmkInfo:            [AzureCmkInput!],
) {
    result: updateCloudNativeAzureStorageSetting(input: {
        id:                 $id,
        name:               $name,
        storageTier:        $storageTier,
        storageAccountTags: $storageAccountTags,
        cmkInfo:            $cmkInfo,
    }) {
        targetMapping {
            id
        }
    }
}`

// upgradeAzureCloudAccountPermissionsWithoutOauth GraphQL query
var upgradeAzureCloudAccountPermissionsWithoutOauthQuery = `mutation SdkGolangUpgradeAzureCloudAccountPermissionsWithoutOauth($cloudAccountId: UUID!, $feature: CloudAccountFeature!) {
    result: upgradeAzureCloudAccountPermissionsWithoutOauth(input: {
        cloudAccountId: $cloudAccountId
        feature:        $feature,
    }) {
        status
    }
}`
