// Code generated by queries_gen.go DO NOT EDIT

// MIT License
//
// Copyright (c) 2021 Rubrik
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package azure

// azureCloudAccountAddWithoutOauth GraphQL query
var azureCloudAccountAddWithoutOauthQuery = `mutation SdkGolangAzureCloudAccountAddWithoutOauth($tenantDomainName: String!, $azureCloudType: AzureCloudTypeEnum!, $regions: [AzureCloudAccountRegionEnum!]!, $feature: CloudAccountFeatureEnum!, $subscriptions: [AzureSubscriptionInput!]!, $policyVersion: Int!) {
    azureCloudAccountAddWithoutOAuth(tenantDomainName: $tenantDomainName, azureCloudType: $azureCloudType, feature: $feature, subscriptions: $subscriptions, regions: $regions, policyVersion: $policyVersion) {
        tenantId
        status {
            subscriptionId
            subscriptionNativeId
            error
        }
    }
}`

// azureCloudAccountDeleteWithoutOauth GraphQL query
var azureCloudAccountDeleteWithoutOauthQuery = `mutation SdkGolangAzureCloudAccountDeleteWithoutOauth($subscriptionIds: [UUID!]!, $feature: CloudAccountFeatureEnum!) {
    azureCloudAccountDeleteWithoutOAuth(feature: $feature, subscriptionIds: $subscriptionIds) {
        status {
            subscriptionId
            success
            error
        }
    }
}`

// azureCloudAccountPermissionConfig GraphQL query
var azureCloudAccountPermissionConfigQuery = `query SdkGolangAzureCloudAccountPermissionConfig($feature: CloudAccountFeatureEnum!) {
    azureCloudAccountPermissionConfig(feature: $feature) {
        permissionVersion
        rolePermissions {
            excludedActions
            excludedDataActions
            includedActions
            includedDataActions
        }
    }
}`

// azureCloudAccountTenant GraphQL query
var azureCloudAccountTenantQuery = `query SdkGolangAzureCloudAccountTenant($tenantId: UUID!, $feature: CloudAccountFeatureEnum!, $subscriptionSearchText: String!) {
    azureCloudAccountTenant(tenantId: $tenantId, feature: $feature, subscriptionSearchText: $subscriptionSearchText, subscriptionStatusFilters: []) {
        cloudType
        id
        clientId
        domainName
        subscriptions {
            id
            name
            nativeId
            featureDetail {
                feature
                regions
                status
            }
        }
    }
}`

// azureCloudAccountTenants GraphQL query
var azureCloudAccountTenantsQuery = `query SdkGolangAzureCloudAccountTenants($feature: CloudAccountFeatureEnum!, $includeSubscriptionDetails: Boolean!) {
    azureCloudAccountTenants(feature: $feature, includeSubscriptionDetails: $includeSubscriptionDetails) {
        cloudType
        id
        clientId
        domainName
        subscriptions {
            id
            name
            nativeId
            featureDetail {
                feature
                regions
                status
            }
        }
    }
}`

// azureCloudAccountUpdate GraphQL query
var azureCloudAccountUpdateQuery = `mutation SdkGolangAzureCloudAccountUpdate($feature: CloudAccountFeatureEnum!, $regionsToAdd: [AzureCloudAccountRegionEnum!], $regionsToRemove: [AzureCloudAccountRegionEnum!], $subscriptions: [AzureCloudAccountSubscriptionInput!]!) {
    azureCloudAccountUpdate(feature: $feature, regionsToAdd: $regionsToAdd, regionsToRemove: $regionsToRemove, subscriptions: $subscriptions) {
        status {
            subscriptionId
            success
        }
    }
}`

// azureExocomputeAdd GraphQL query
var azureExocomputeAddQuery = `mutation SdkGolangAzureExocomputeAdd($cloudAccountUuid: UUID!, $azureExocomputeAddRequests: [AzureExocomputeAddConfigInputType!]!) {
    azureExocomputeAdd(cloudAccountUuid: $cloudAccountUuid, azureExocomputeAddRequests: $azureExocomputeAddRequests) {
        configs {
            configUuid
            isPolarisManaged
            message
            region
            subnetNativeId
        }
    }
}`

// azureExocomputeConfigs GraphQL query
var azureExocomputeConfigsQuery = `query SdkGolangAzureExocomputeConfigs($cloudAccountIDs: [UUID!], $azureExocomputeSearchQueryArg: String!) {
    azureExocomputeConfigs(cloudAccountIDs: $cloudAccountIDs, azureExocomputeSearchQueryArg: $azureExocomputeSearchQueryArg) {
        configs {
            azureCloudAccount {
                id
                name
                nativeId
                featureDetail {
                    feature
                    regions
                    status
                }
            }
            configs {
                configUuid
                isPolarisManaged
                message
                region
                subnetNativeId
            }
            exocomputeEligibleRegions
            featureDetails {
                feature
                regions
                status
            }
        }
    }
}`

// azureExocomputeConfigsDelete GraphQL query
var azureExocomputeConfigsDeleteQuery = `mutation SdkGolangAzureExocomputeConfigsDelete($azureExocomputeConfigIdsArg: [UUID!]!) {
    azureExocomputeConfigsDelete(azureExocomputeConfigIdsArg: $azureExocomputeConfigIdsArg) {
        deletionFailedIds
        deletionSuccessIds
    }
}`

// azureNativeSubscription GraphQL query
var azureNativeSubscriptionQuery = `query SdkGolangAzureNativeSubscription($fid: UUID!) {
    azureNativeSubscription(fid: $fid) {
        id
        nativeId
        name
        status
        slaAssignment
        configuredSlaDomain{
            id
            name
        }
        effectiveSlaDomain{
            id
            name
        }
    }
}`

// azureNativeSubscriptionConnection GraphQL query
var azureNativeSubscriptionConnectionQuery = `query SdkGolangAzureNativeSubscriptionConnection($after: String, $filter: String!) {
    azureNativeSubscriptionConnection(after: $after, subscriptionFilters: {
        nameSubstringFilter: {
            nameSubstring: $filter
        }
    }) {
        count
        edges {
            node {
                id
                nativeId
                name
                status
                slaAssignment
                configuredSlaDomain{
                    id
                    name
                }
                effectiveSlaDomain{
                    id
                    name
                }
            }
        }
        pageInfo {
            endCursor
            hasNextPage
        }
    }
}`

// azureNativeSubscriptions GraphQL query
var azureNativeSubscriptionsQuery = `query SdkGolangAzureNativeSubscriptions($filter: String = "") {
    azureNativeSubscriptions(subscriptionFilters: {
        nameSubstringFilter: {
            nameSubstring: $filter
        }
    }) {
        count
        edges {
            node {
                id
                azureSubscriptionNativeId
                name
                azureSubscriptionStatus
                slaAssignment
                configuredSlaDomain{
                    id
                    name
                }
                effectiveSlaDomain{
                    id
                    name
                }
            }
        }
        pageInfo {
            endCursor
            hasNextPage
        }
    }
}`

// azureSetCustomerAppCredentials GraphQL query
var azureSetCustomerAppCredentialsQuery = `mutation SdkGolangAzureSetCustomerAppCredentials($azureCloudType: AzureCloudTypeEnum!, $appId: String!, $appName: String, $appSecretKey: String!, $appTenantId: String, $tenantDomainName: String) {
    azureSetCustomerAppCredentials(appId: $appId, appSecretKey: $appSecretKey, appTenantId: $appTenantId, appName: $appName, tenantDomainName: $tenantDomainName, azureCloudType: $azureCloudType)
}`

// deleteAzureNativeSubscription GraphQL query
var deleteAzureNativeSubscriptionQuery = `mutation SdkGolangDeleteAzureNativeSubscription($subscriptionId: UUID!, $shouldDeleteNativeSnapshots: Boolean!) {
    deleteAzureNativeSubscription(subscriptionId: $subscriptionId, shouldDeleteNativeSnapshots: $shouldDeleteNativeSnapshots) {
        taskchainUuid
    }
}`

// startDisableAzureNativeSubscriptionProtectionJob GraphQL query
var startDisableAzureNativeSubscriptionProtectionJobQuery = `mutation SdkGolangStartDisableAzureNativeSubscriptionProtectionJob($azureSubscriptionRubrikId: UUID!, $shouldDeleteNativeSnapshots: Boolean!) {
    startDisableAzureNativeSubscriptionProtectionJob(input: {azureSubscriptionRubrikId: $azureSubscriptionRubrikId, shouldDeleteNativeSnapshots: $shouldDeleteNativeSnapshots}) {
        jobId
    }
}`
