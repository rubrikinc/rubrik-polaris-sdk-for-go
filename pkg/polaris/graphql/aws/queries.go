// Code generated by queries_gen.go DO NOT EDIT

// MIT License
//
// Copyright (c) 2021 Rubrik
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package aws

// allAwsCloudAccountsWithFeatures GraphQL query
var allAwsCloudAccountsWithFeaturesQuery = `query SdkGolangAllAwsCloudAccountsWithFeatures($feature: CloudAccountFeature!, $columnSearchFilter: String!) {
    result: allAwsCloudAccountsWithFeatures(awsCloudAccountsArg: {columnSearchFilter: $columnSearchFilter, statusFilters: [], feature: $feature}) {
        awsCloudAccount {
            cloudType
            id
            nativeId
            message
            accountName
        }
        featureDetails {
            feature
            permissionsGroups
            roleArn
            stackArn
            status
            awsRegions
        }
    }
}`

// allAwsExocomputeConfigs GraphQL query
var allAwsExocomputeConfigsQuery = `query SdkGolangAllAwsExocomputeConfigs($awsNativeAccountIdOrNamePrefix: String!) {
    result: allAwsExocomputeConfigs(awsNativeAccountIdOrNamePrefix: $awsNativeAccountIdOrNamePrefix) {
        awsCloudAccount {
            cloudType
            id
            nativeId
            message
            accountName
        }
        mappedCloudAccounts {
            id
            name
            nativeId
        }
        featureDetail {
            feature
            roleArn
            stackArn
            status
            awsRegions
        }
        exocomputeConfigs {
            configUuid
            healthCheckStatus {
                failureReason
                lastUpdatedAt
                status
                taskchainId
            }
            region
            ... on AwsCustomerManagedExocomputeConfig {
                clusterName
            }
            ... on AwsRscManagedExocomputeConfig {
                vpcId
                clusterSecurityGroupId
                nodeSecurityGroupId
                subnet1 {
                    availabilityZone
                    subnetId
                }
                subnet2 {
                    availabilityZone
                    subnetId
                }
                areSecurityGroupsRscManaged
            }
        }
    }
}`

// allAwsPermissionPolicies GraphQL query
var allAwsPermissionPoliciesQuery = `query SdkGolangAllAwsPermissionPolicies($cloudType: AwsCloudType!, $features: [CloudAccountFeature!], $featuresWithPG: [FeatureWithPermissionsGroups!], $ec2RecoveryRolePath: String) {
    result: allAwsPermissionPolicies(input: {
        cloudType: $cloudType,
        features: $features,
        featuresWithPermissionsGroups: $featuresWithPG,
        featureSpecificDetails: {
            ec2RecoveryRolePath: $ec2RecoveryRolePath
        }
    }) {
        externalArtifactKey
        awsManagedPolicies
        customerManagedPolicies {
            feature
            policyName
            policyDocumentJson
        }
    }
}`

// allTargetMappings GraphQL query
var allTargetMappingsQuery = `query SdkGolangAllTargetMappings($filter: [TargetMappingFilterInput!]) {
    result: allTargetMappings(sortBy: NAME, sortOrder: ASC, filter: $filter) {
        id
        name
        groupType
        targetType
        connectionStatus {
            status
        }
        targetTemplate {
            ... on AwsTargetTemplate {
                cloudAccount {
                    cloudAccountId
                }
                bucketPrefix
                storageClass
                region
                kmsMasterKeyId
                cloudNativeLocTemplateType
                bucketTags {
                    key
                    value
                }
            }
        }
    }
}`

// allVpcsByRegionFromAws GraphQL query
var allVpcsByRegionFromAwsQuery = `query SdkGolangAllVpcsByRegionFromAws($awsAccountRubrikId: UUID!, $region: AwsNativeRegion!) {
    allVpcsByRegionFromAws(awsAccountRubrikId: $awsAccountRubrikId, region: $region) {
        id
        name
        subnets {
            id
            name
            availabilityZone
        }
        securityGroups {
            id
            name
        }
    }
}`

// awsArtifactsToDelete GraphQL query
var awsArtifactsToDeleteQuery = `query SdkGolangAwsArtifactsToDelete($awsNativeId: String!, $features: [CloudAccountFeature!]!) {
  result: awsArtifactsToDelete(input: {awsNativeId: $awsNativeId, features: $features}) {
    artifactsToDelete {
      feature
      artifactsToDelete {
        externalArtifactKey
        externalArtifactValue
      }
    }
  }
}`

// awsCloudAccountWithFeatures GraphQL query
var awsCloudAccountWithFeaturesQuery = `query SdkGolangAwsCloudAccountWithFeatures($cloudAccountId: UUID!, $features: [CloudAccountFeature!]!) {
    result: awsCloudAccountWithFeatures(cloudAccountId: $cloudAccountId, awsCloudAccountArg: {features: $features}) {
        awsCloudAccount {
            cloudType
            id
            nativeId
            message
            accountName
        }
        featureDetails {
            feature
            permissionsGroups
            roleArn
            stackArn
            status
            awsRegions
        }
    }
}`

// awsNativeAccount GraphQL query
var awsNativeAccountQuery = `query SdkGolangAwsNativeAccount($awsNativeAccountRubrikId: UUID!, $awsNativeProtectionFeature: AwsNativeProtectionFeature!) {
	awsNativeAccount(awsNativeAccountRubrikId: $awsNativeAccountRubrikId, awsNativeProtectionFeature: $awsNativeProtectionFeature) {
		id
		regionSpecs {
			region
			isExocomputeConfigured
		}
		status
		name
		slaAssignment
		configuredSlaDomain {
			id
			name
		}
		effectiveSlaDomain {
			id
			name
		}
	}
}`

// awsNativeAccounts GraphQL query
var awsNativeAccountsQuery = `query SdkGolangAwsNativeAccounts($after: String, $awsNativeProtectionFeature: AwsNativeProtectionFeature!, $filter: String!) {
	awsNativeAccounts(after: $after, awsNativeProtectionFeature: $awsNativeProtectionFeature, accountFilters: {nameSubstringFilter: {nameSubstring: $filter}}) {
		count
		edges {
			node {
				id
				regionSpecs {
					region
					isExocomputeConfigured
				}
				status
				name
				slaAssignment
				configuredSlaDomain {
					id
					name
				}
				effectiveSlaDomain {
					id
					name
				}
			}
		}
		pageInfo {
			endCursor
			hasNextPage
		}
	}
}`

// awsTrustPolicy GraphQL query
var awsTrustPolicyQuery = `query SdkGolangAwsTrustPolicy($cloudType: AwsCloudType!, $features: [CloudAccountFeature!]!, $awsNativeAccounts: [AwsNativeAccountInput!]!) {
    result: awsTrustPolicy(input: {cloudType: $cloudType, features: $features, awsNativeAccounts: $awsNativeAccounts}) {
        result {
            artifacts {
                externalArtifactKey
                trustPolicyDoc
                errorMessage
            }
            awsNativeId
        }
    }
}`

// bulkDeleteAwsCloudAccountWithoutCft GraphQL query
var bulkDeleteAwsCloudAccountWithoutCftQuery = `mutation SdkGolangBulkDeleteAwsCloudAccountWithoutCft($awsNativeId: String!, $features: [CloudAccountFeature!]) {
    result: bulkDeleteAwsCloudAccountWithoutCft(input: {awsNativeId: $awsNativeId, features: $features}) {
        deleteAwsCloudAccountWithoutCftResp {
            feature
            success
        }
    }
}`

// connectAwsExocomputeCluster GraphQL query
var connectAwsExocomputeClusterQuery = `mutation SdkGolangConnectAwsExocomputeCluster($clusterName: String!, $exocomputeConfigId: UUID!) {
    result: awsExocomputeClusterConnect(input: {
        clusterName:        $clusterName,
        exocomputeConfigId: $exocomputeConfigId
    }) {
        clusterUuid
        connectionCommand
    }
}`

// createAwsExocomputeConfigs GraphQL query
var createAwsExocomputeConfigsQuery = `mutation SdkGolangCreateAwsExocomputeConfigs($cloudAccountId: UUID!, $configs: [AwsExocomputeConfigInput!]!) {
    createAwsExocomputeConfigs(input: {cloudAccountId: $cloudAccountId, configs: $configs}) {
        configs {
            areSecurityGroupsRscManaged
            clusterSecurityGroupId
            configUuid
            message
            nodeSecurityGroupId
            region
            subnet1 {
                availabilityZone
                subnetId
            }
            subnet2 {
                availabilityZone
                subnetId
            }
            vpcId
        }
    }
}`

// createCloudNativeAwsStorageSetting GraphQL query
var createCloudNativeAwsStorageSettingQuery = `mutation SdkGolangCreateCloudNativeAwsStorageSetting(
    $cloudAccountId:  UUID!,
    $name:            String!,
    $bucketPrefix:    String!,
    $storageClass:    AwsStorageClass!,
    $region:          AwsRegion,
    $kmsMasterKeyId:  String!,
    $locTemplateType: CloudNativeLocTemplateType!,
    $bucketTags:      TagsInput
) {
    result: createCloudNativeAwsStorageSetting(input: {
        cloudAccountId:             $cloudAccountId,
        name:                       $name,
        bucketPrefix:               $bucketPrefix,
        storageClass:               $storageClass,
        region:                     $region,
        kmsMasterKeyId:             $kmsMasterKeyId,
        cloudNativeLocTemplateType: $locTemplateType,
        bucketTags:                 $bucketTags
    }) {
        targetMapping {
            id
        }
    }
}`

// deleteAwsExocomputeConfigs GraphQL query
var deleteAwsExocomputeConfigsQuery = `mutation SdkGolangDeleteAwsExocomputeConfigs($configIdsToBeDeleted: [UUID!]!) {
    deleteAwsExocomputeConfigs(input: {configIdsToBeDeleted: $configIdsToBeDeleted}) {
        deletionStatus {
            exocomputeConfigId
            success
        }
    }
}`

// deleteTargetMapping GraphQL query
var deleteTargetMappingQuery = `mutation SdkGolangDeleteTargetMapping($id: String!) {
    result: deleteTargetMapping(input: {
        id: $id
    })
}`

// finalizeAwsCloudAccountDeletion GraphQL query
var finalizeAwsCloudAccountDeletionQuery = `mutation SdkGolangFinalizeAwsCloudAccountDeletion($cloudAccountId: UUID!, $feature: CloudAccountFeature!) {
    finalizeAwsCloudAccountDeletion(input: {cloudAccountId: $cloudAccountId, feature: $feature}) {
        message
    }
}`

// finalizeAwsCloudAccountProtection GraphQL query
var finalizeAwsCloudAccountProtectionQuery = `mutation SdkGolangFinalizeAwsCloudAccountProtection($nativeId: String!, $accountName: String!, $awsRegions: [AwsCloudAccountRegion!], $externalId: String!, $featureVersion: [AwsCloudAccountFeatureVersionInput!]!, $features: [CloudAccountFeature!], $featuresWithPG: [FeatureWithPermissionsGroups!], $stackName: String!) {
    finalizeAwsCloudAccountProtection(input: {
        action: CREATE,
        awsChildAccounts: [{
            accountName: $accountName,
            nativeId: $nativeId,
        }],
        awsRegions: $awsRegions,
        externalId: $externalId,
        featureVersion: $featureVersion,
        features: $features,
        featuresWithPermissionsGroups: $featuresWithPG,
        stackName: $stackName,
    }) {
       awsChildAccounts {
           accountName
           nativeId
           message
       }
       message
    }
}`

// mapCloudAccountExocomputeAccount GraphQL query
var mapCloudAccountExocomputeAccountQuery = `mutation SdkGolangMapCloudAccountExocomputeAccount($exocomputeCloudAccountId: UUID!, $cloudAccountIds: [UUID!]!) {
    result: mapCloudAccountExocomputeAccount(input: {
        exocomputeCloudAccountId: $exocomputeCloudAccountId,
        cloudAccountIds:          $cloudAccountIds,
        cloudVendor:              AWS
    }) {
        isSuccess
    }
}`

// prepareAwsCloudAccountDeletion GraphQL query
var prepareAwsCloudAccountDeletionQuery = `mutation SdkGolangPrepareAwsCloudAccountDeletion($cloudAccountId: UUID!, $feature: CloudAccountFeature!) {
    prepareAwsCloudAccountDeletion(input: {cloudAccountId: $cloudAccountId, feature: $feature}) {
        cloudFormationUrl
    }
}`

// prepareFeatureUpdateForAwsCloudAccount GraphQL query
var prepareFeatureUpdateForAwsCloudAccountQuery = `mutation SdkGolangPrepareFeatureUpdateForAwsCloudAccount($cloudAccountId: UUID!, $features: [CloudAccountFeature!]!) {
    result: prepareFeatureUpdateForAwsCloudAccount(input: {cloudAccountId: $cloudAccountId, features: $features}) {
        cloudFormationUrl
        templateUrl
    }
}`

// privateContainerRegistry GraphQL query
var privateContainerRegistryQuery = `query SdkGolangPrivateContainerRegistry($exocomputeCloudAccountId: UUID!) {
    result: privateContainerRegistry(input: {
        exocomputeAccountId: $exocomputeCloudAccountId,
    }) {
        pcrDetails {
            imagePullDetails {
              ... on PcrAwsImagePullDetails {
                awsNativeId
              }
            }
            registryUrl
        }
    }
}`

// registerAwsFeatureArtifacts GraphQL query
var registerAwsFeatureArtifactsQuery = `mutation SdkGolangRegisterAwsFeatureArtifacts($cloudType: AwsCloudType, $awsArtifacts: [AwsAccountFeatureArtifact!]!) {
    result: registerAwsFeatureArtifacts(input: {cloudType: $cloudType, awsArtifacts: $awsArtifacts}) {
        allAwsNativeIdtoRscIdMappings {
            awsCloudAccountId
            awsNativeId
            message
        }
    }
}`

// setPrivateContainerRegistryDetails GraphQL query
var setPrivateContainerRegistryDetailsQuery = `mutation SdkGolangSetPrivateContainerRegistryDetails($exocomputeAccountId: UUID!, $registryUrl: String!, $awsNativeId: String) {
    setPrivateContainerRegistry(input: {
        exocomputeAccountId: $exocomputeAccountId,
        registryUrl:         $registryUrl,
        pcrAwsImagePullDetails: {
            awsNativeId: $awsNativeId
        }
    })
}`

// startAwsExocomputeDisableJob GraphQL query
var startAwsExocomputeDisableJobQuery = `mutation SdkGolangStartAwsExocomputeDisableJob($cloudAccountId: UUID!) {
    result: startAwsExocomputeDisableJob(input: {cloudAccountId: $cloudAccountId}) {
        error
        jobId
    }
}`

// startAwsNativeAccountDisableJob GraphQL query
var startAwsNativeAccountDisableJobQuery = `mutation SdkGolangStartAwsNativeAccountDisableJob($awsAccountRubrikId: UUID!, $awsNativeProtectionFeature: AwsNativeProtectionFeature!, $shouldDeleteNativeSnapshots: Boolean!) {
    startAwsNativeAccountDisableJob(input: {
        awsAccountRubrikId:          $awsAccountRubrikId,
        shouldDeleteNativeSnapshots: $shouldDeleteNativeSnapshots,
        awsNativeProtectionFeature:  $awsNativeProtectionFeature
    }) {
        error
        jobId
    }
}`

// unmapCloudAccountExocomputeAccount GraphQL query
var unmapCloudAccountExocomputeAccountQuery = `mutation SdkGolangUnmapCloudAccountExocomputeAccount($cloudAccountIds: [UUID!]!) {
    result: unmapCloudAccountExocomputeAccount(input: {
        cloudAccountIds: $cloudAccountIds,
        cloudVendor:     AWS,
    }) {
        isSuccess
    }
}`

// updateAwsCloudAccount GraphQL query
var updateAwsCloudAccountQuery = `mutation SdkGolangUpdateAwsCloudAccount($cloudAccountId: UUID!, $awsAccountName: String) {
  result: updateAwsCloudAccount(input: {cloudAccountId: $cloudAccountId, awsAccountName: $awsAccountName})
}`

// updateAwsCloudAccountFeature GraphQL query
var updateAwsCloudAccountFeatureQuery = `mutation SdkGolangUpdateAwsCloudAccountFeature($action: CloudAccountAction!, $cloudAccountId: UUID!, $awsRegions: [AwsCloudAccountRegion!]!, $feature: CloudAccountFeature!) {
    result: updateAwsCloudAccountFeature(input: {action: $action, cloudAccountId: $cloudAccountId, awsRegions: $awsRegions, feature: $feature}) {
        message
    }
}`

// updateAwsExocomputeConfigs GraphQL query
var updateAwsExocomputeConfigsQuery = `mutation SdkGolangUpdateAwsExocomputeConfigs($cloudAccountId: UUID!, $configs: [AwsExocomputeConfigInput!]!) {
    updateAwsExocomputeConfigs(input: {cloudAccountId: $cloudAccountId, configs: $configs}) {
        configs {
            areSecurityGroupsRscManaged
            clusterSecurityGroupId
            configUuid
            message
            nodeSecurityGroupId
            region
            subnet1 {
                availabilityZone
                subnetId
            }
            subnet2 {
                availabilityZone
                subnetId
            }
            vpcId
        }
    }
}`

// updateCloudNativeAwsStorageSetting GraphQL query
var updateCloudNativeAwsStorageSettingQuery = `mutation SdkGolangUpdateCloudNativeAwsStorageSetting(
    $id:             UUID!,
    $name:           String,
    $storageClass:   AwsStorageClass,
    $kmsMasterKeyId: String
) {
    result: updateCloudNativeAwsStorageSetting(input: {
        id:             $id,
        name:           $name,
        storageClass:   $storageClass,
        kmsMasterKeyId: $kmsMasterKeyId
    }) {
        targetMapping {
            id
        }
    }
}`

// validateAndCreateAwsCloudAccount GraphQL query
var validateAndCreateAwsCloudAccountQuery = `mutation SdkGolangValidateAndCreateAwsCloudAccount($nativeId: String!, $accountName: String!, $features: [CloudAccountFeature!], $featuresWithPG: [FeatureWithPermissionsGroups!]) {
    result: validateAndCreateAwsCloudAccount(input: {
        action: CREATE,
        awsChildAccounts: [{
            accountName: $accountName,
            nativeId: $nativeId,
        }],
        features: $features,
        featuresWithPermissionsGroups: $featuresWithPG
    }) {
        initiateResponse {
            cloudFormationUrl
            externalId
            featureVersions {
                feature
                permissionsGroupVersions {
                    permissionsGroup
                    version
                }
                version
            }
            stackName
            templateUrl
        }
        validateResponse {
            invalidAwsAccounts {
                accountName
                nativeId
                message
            }
            invalidAwsAdminAccount {
                accountName
                nativeId
                message
            }
        }
    }
}`
