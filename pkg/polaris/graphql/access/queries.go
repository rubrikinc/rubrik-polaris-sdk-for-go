// Code generated by queries_gen.go DO NOT EDIT

// MIT License
//
// Copyright (c) 2021 Rubrik
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package access

// addRoleAssignment GraphQL query
var addRoleAssignmentQuery = `mutation SdkGolangAddRoleAssignment($userIds: [String!]!, $groupIds: [String!], $roleIds: [String!]!) {
    result: addRoleAssignments(
        userIds:  $userIds
        groupIds: $groupIds
        roleIds:  $roleIds
    )
}`

// createUser GraphQL query
var createUserQuery = `mutation SdkGolangCreateUser($email: String!, $roleIds: [String!]!) {
  result: createUser(email: $email, roleIds: $roleIds)
}`

// deleteRole GraphQL query
var deleteRoleQuery = `mutation SdkGolangDeleteRole($roleId: String!) {
    result: deleteRole(roleId: $roleId)
}`

// deleteUserFromAccount GraphQL query
var deleteUserFromAccountQuery = `mutation SdkGolangDeleteUserFromAccount($ids: [String!]!) {
  result: deleteUsersFromAccount(ids: $ids)
}`

// getAllRolesInOrgConnection GraphQL query
var getAllRolesInOrgConnectionQuery = `query SdkGolangGetAllRolesInOrgConnection($after: String, $nameFilter: String) {
    result: getAllRolesInOrgConnection(
        after:      $after,
        nameFilter: $nameFilter,
    ) {
        edges {
            node {
                id
                name
                description
                isOrgAdmin
                explicitlyAssignedPermissions {
                    operation
                    objectsForHierarchyTypes {
                        objectIds
                        snappableType
                    }
                }
            }
        }
        pageInfo {
            endCursor
            hasNextPage
        }
    }
}`

// getRolesByIds GraphQL query
var getRolesByIdsQuery = `query SdkGolangGetRolesByIds($roleIds: [String!]!) {
    result: getRolesByIds(roleIds: $roleIds) {
        id
        name
        description
        isOrgAdmin
        protectableClusters
        explicitlyAssignedPermissions {
            operation
            objectsForHierarchyTypes {
                objectIds
                snappableType
            }
        }
    }
}`

// mutateRole GraphQL query
var mutateRoleQuery = `mutation SdkGolangMutateRole($roleId: String, $name: String!, $description: String!, $permissions: [PermissionInput!]!, $protectableClusters: [String!]!) {
    result: mutateRole(
        roleId:              $roleId,
        name:                $name,
        description:         $description,
        permissions:         $permissions,
        protectableClusters: $protectableClusters,
    )
}`

// roleTemplates GraphQL query
var roleTemplatesQuery = `query SdkGolangRoleTemplates($after: String, $nameFilter: String) {
    result: roleTemplates(
        after:      $after,
        nameFilter: $nameFilter,
    ) {
        edges {
            node {
                id
                name
                description
                explicitlyAssignedPermissions {
                    operation
                    objectsForHierarchyTypes {
                        objectIds
                        snappableType
                    }
                }
            }
        }
        pageInfo {
            endCursor
            hasNextPage
        }
    }
}`

// updateRoleAssignments GraphQL query
var updateRoleAssignmentsQuery = `mutation SdkGolangUpdateRoleAssignments($userIds: [String!]!, $groupIds: [String!], $roleIds: [String!]!) {
    result: updateRoleAssignments(
        userIds:  $userIds,
        groupIds: $groupIds,
        roleIds:  $roleIds
    )
}`

// usersInCurrentAndDescendantOrganization GraphQL query
var usersInCurrentAndDescendantOrganizationQuery = `query SdkGolangUsersInCurrentAndDescendantOrganization($after: String, $emailFilter: String) {
    result: usersInCurrentAndDescendantOrganization(after: $after, filter: {emailFilter: $emailFilter}) {
        edges {
            node {
                id
                email
                status
                isAccountOwner
                roles {
                    id
                    name
                    description
                    isOrgAdmin
                    protectableClusters
                    explicitlyAssignedPermissions {
                        operation
                        objectsForHierarchyTypes {
                            objectIds
                            snappableType
                        }
                    }
                }
            }
        }
        pageInfo {
            endCursor
            hasNextPage
        }
    }
}`
