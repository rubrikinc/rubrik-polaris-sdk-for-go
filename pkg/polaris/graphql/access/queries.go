// Code generated by queries_gen.go DO NOT EDIT

// MIT License
//
// Copyright (c) 2021 Rubrik
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package access

// deleteRole GraphQL query
var deleteRoleQuery = `mutation DeleteRole($roleId: String!) {
  result: deleteRole(roleId: $roleId)
}`

// getAllRolesInOrgConnection GraphQL query
var getAllRolesInOrgConnectionQuery = `query SdkGolangGetAllRolesInOrgConnection($after: String, $first: Int, $sortBy: RoleFieldEnum, $sortOrder: SortOrder, $nameFilter: String) {
  result: getAllRolesInOrgConnection(
    after:      $after,
    first:      $first,
    sortBy:     $sortBy,
    sortOrder:  $sortOrder,
    nameFilter: $nameFilter,
  ) {
    edges {
      node {
        id
        name
        description
        explicitlyAssignedPermissions {
            operation
            objectsForHierarchyTypes {
              objectIds
              snappableType
            }
        }
        isOrgAdmin
      }
    }
    pageInfo {
      startCursor
      endCursor
      hasNextPage
      hasPreviousPage
    }
  }
}`

// getRolesByIds GraphQL query
var getRolesByIdsQuery = `query SdkGolangGetRolesByIds($roleIds: [String!]!) {
    result: getRolesByIds(roleIds: $roleIds) {
        id
        name
        description
        isReadOnly
        protectableClusters
        explicitlyAssignedPermissions {
            operation
            objectsForHierarchyTypes {
                objectIds
                snappableType
            }
        }
    }
}`

// mutateRole GraphQL query
var mutateRoleQuery = `mutation SdkGolangMutateRole($roleId: String, $name: String!, $description: String!, $permissions: [PermissionInput!]!, $protectableClusters: [String!]!) {
    result: mutateRole(
        roleId:              $roleId,
        name:                $name,
        description:         $description,
        permissions:         $permissions,
        protectableClusters: $protectableClusters,
    )
}`

// roleTemplates GraphQL query
var roleTemplatesQuery = `query SdkGolangRoleTemplates($after: String, $first: Int, $nameFilter: String) {
    result: roleTemplates(
        after:      $after,
        first:      $first,
        nameFilter: $nameFilter,
    ) {
        edges {
            node {
                id
                name
                description
                explicitlyAssignedPermissions {
                    operation
                    objectsForHierarchyTypes {
                        objectIds
                        snappableType
                    }
                }
            }
        }
        pageInfo {
          startCursor
          endCursor
          hasNextPage
          hasPreviousPage
        }
    }
}`
