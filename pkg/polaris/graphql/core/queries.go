// Code generated by queries_gen.go DO NOT EDIT

// MIT License
//
// Copyright (c) 2021 Rubrik
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package core

// assignSlaForSnappableHierarchies GraphQL query
var assignSlaForSnappableHierarchiesQuery = `mutation SdkGolangAssignSlaForSnappableHierarchies(
    $globalSlaOptionalFid: UUID,
    $globalSlaAssignType: SlaAssignTypeEnum!,
    $objectIds: [UUID!]!,
    $applicableSnappableTypes: [SnappableLevelHierarchyTypeEnum!],
    $shouldApplyToExistingSnapshots: Boolean,
    $shouldApplyToNonPolicySnapshots: Boolean,
    $globalExistingSnapshotRetention: GlobalExistingSnapshotRetentionEnum) {
        assignSlasForSnappableHierarchies(
            globalSlaOptionalFid: $globalSlaOptionalFid,
            globalSlaAssignType: $globalSlaAssignType,
            objectIds: $objectIds,
            applicableSnappableTypes: $applicableSnappableTypes,
            shouldApplyToExistingSnapshots: $shouldApplyToExistingSnapshots,
            shouldApplyToNonPolicySnapshots: $shouldApplyToNonPolicySnapshots,
            globalExistingSnapshotRetention: $globalExistingSnapshotRetention
        ) {
            success
        }
}`

// deploymentVersion GraphQL query
var deploymentVersionQuery = `query SdkGolangDeploymentVersion {
    deploymentVersion
}`

// getKorgTaskchainStatus GraphQL query
var getKorgTaskchainStatusQuery = `query SdkGolangGetKorgTaskchainStatus($taskchainId: String!){
    getKorgTaskchainStatus(taskchainId: $taskchainId){
        taskchain {
            id
            state
            taskchainUuid
        }
    }
}`

// globalSlaConnection GraphQL query
var globalSlaConnectionQuery = `query SdkGolangGlobalSlaConnection(
  $first: Int,
  $after: String,
  $last: Int,
  $before: String,
  $sortBy: SLAQuerySortByFieldEnum,
  $sortOrder: SLAQuerySortByOrderEnum,
  $filter: [GlobalSlaFilterInput!],
  $contextFilter: ContextFilterTypeEnum,
  $contextFilterInput: [ContextFilterInputField!],
  $showSyncStatus: Boolean,
  $showProtectedObjectCount: Boolean,
  $showUpgradeInfo: Boolean) {
    globalSlaConnection(
      first: $first,
      after: $after,
      last: $last,
      before: $before,
      sortBy: $sortBy,
      sortOrder: $sortOrder,
      filter: $filter,
      contextFilter: $contextFilter,
      contextFilterInput: $contextFilterInput,
      showSyncStatus: $showSyncStatus,
      showProtectedObjectCount: $showProtectedObjectCount,
      showUpgradeInfo: $showUpgradeInfo
    ) {
      edges {
        node {
          id,
          name,
          ... on GlobalSla {
            baseFrequency {
              duration,
              unit,
            },
            objectTypeList,
          }
        }
      }
      pageInfo {
        endCursor,
        hasNextPage,
      },
      count,
    }
}`
