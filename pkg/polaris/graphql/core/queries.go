// Code generated by queries_gen.go DO NOT EDIT.

// MIT License
//
// Copyright (c) 2021 Rubrik
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package core

// allDeploymentIpAddresses GraphQL query
var allDeploymentIpAddressesQuery = `query SdkGolangAllDeploymentIpAddresses {
  allDeploymentIpAddresses
}`

// allEnabledFeaturesForAccount GraphQL query
var allEnabledFeaturesForAccountQuery = `query SdkGolangAllEnabledFeaturesForAccount {
    result: allEnabledFeaturesForAccount {
        features
    }
}`

// deploymentVersion GraphQL query
var deploymentVersionQuery = `query SdkGolangDeploymentVersion {
    deploymentVersion
}`

// featureFlag GraphQL query
var featureFlagQuery = `query SdkGolangFeatureFlag($flagName: FeatureFlagName!) {
    result: featureFlag(flagName: $flagName, entityType: ACCOUNT, entityContext: []) {
        name
        variant
    }
}`

// featureFlagAll GraphQL query
var featureFlagAllQuery = `query SdkGolangFeatureFlagAll {
    result: featureFlagAll(entityType: ACCOUNT, entityContext: []) {
        flags {
            name
            variant
        }
    }
}`

// getKorgTaskchainStatus GraphQL query
var getKorgTaskchainStatusQuery = `query SdkGolangGetKorgTaskchainStatus($taskchainId: String!){
    getKorgTaskchainStatus(taskchainId: $taskchainId){
        taskchain {
            id
            state
            taskchainUuid
        }
    }
}`

// registerCluster GraphQL query
var registerClusterQuery = `mutation SdkGolangRegisterCluster($managedByPolaris: Boolean, $nodeConfigs: [NodeRegistrationConfigsInput!], $isOfflineRegistration: Boolean) {
    result: generateClusterRegistrationToken(input: {
        managedByPolaris:      $managedByPolaris,
        nodeConfigs:           $nodeConfigs,
        isOfflineRegistration: $isOfflineRegistration,
    }) {
        token
        pubkey
        productType
    }
}`

// singleUnifiedFeatureFlag GraphQL query
var singleUnifiedFeatureFlagQuery = `query SdkGolangSingleUnifiedFeatureFlag($flagName: String!) {
    result: singleUnifiedFeatureFlag(input: {
        key: $flagName,
    }) {
        name
        variant
    }
}`
