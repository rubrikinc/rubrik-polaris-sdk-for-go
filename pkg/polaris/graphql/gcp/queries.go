// Code generated by queries_gen.go DO NOT EDIT

// MIT License
//
// Copyright (c) 2021 Rubrik
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package gcp

// allFeaturePermissionsForGcpCloudAccount GraphQL query
var allFeaturePermissionsForGcpCloudAccountQuery = `query SdkGolangAllFeaturePermissionsForGcpCloudAccount($feature: CloudAccountFeature!) {
    result: allFeaturePermissionsForGcpCloudAccount(feature: $feature){
        permission
    }
}`

// allGcpCloudAccountProjectsByFeature GraphQL query
var allGcpCloudAccountProjectsByFeatureQuery = `query SdkGolangAllGcpCloudAccountProjectsByFeature($feature: CloudAccountFeature!, $projectSearchText: String!) {
    result: allGcpCloudAccountProjectsByFeature(feature: $feature, projectStatusFilters: [], projectSearchText: $projectSearchText) {
        project {
            id
            name
            projectId
            projectNumber
            roleId
            usesGlobalConfig
        }
        featureDetail {
            feature
            status
        }
    }
}`

// gcpCloudAccountAddManualAuthProject GraphQL query
var gcpCloudAccountAddManualAuthProjectQuery = `mutation SdkGolangGcpCloudAccountAddManualAuthProject($gcpNativeProjectId: String!, $gcpProjectName: String!, $gcpProjectNumber: Long!, $organizationName: String, $serviceAccountJwtConfig: String, $feature: CloudAccountFeature!) {
    gcpCloudAccountAddManualAuthProject(input: {
        gcpNativeProjectId:      $gcpNativeProjectId,
        gcpProjectName:          $gcpProjectName,
        gcpProjectNumber:        $gcpProjectNumber,
        organizationName:        $organizationName,
        serviceAccountJwtConfig: $serviceAccountJwtConfig,
        features:                [$feature],
    })
}`

// gcpCloudAccountAddManualAuthProjectV0 GraphQL query
var gcpCloudAccountAddManualAuthProjectV0Query = `mutation SdkGolangGcpCloudAccountAddManualAuthProjectV0($feature: CloudAccountFeatureEnum!, $gcpNativeProjectId: String!, $gcpProjectName: String!, $gcpProjectNumber: Long!, $organizationName: String, $serviceAccountJwtConfigOptional: String) {
    gcpCloudAccountAddManualAuthProject(
        features: [$feature],
        gcpNativeProjectId: $gcpNativeProjectId,
        gcpProjectName: $gcpProjectName,
        gcpProjectNumber: $gcpProjectNumber,
        organizationName: $organizationName,
        serviceAccountJwtConfigOptional: $serviceAccountJwtConfigOptional,
    )
}`

// gcpCloudAccountAddManualAuthProjectV1 GraphQL query
var gcpCloudAccountAddManualAuthProjectV1Query = `mutation SdkGolangGcpCloudAccountAddManualAuthProjectV1($feature: CloudAccountFeature!, $gcpNativeProjectId: String!, $gcpProjectName: String!, $gcpProjectNumber: Long!, $organizationName: String, $serviceAccountJwtConfigOptional: String) {
    gcpCloudAccountAddManualAuthProject(
        features: [$feature],
        gcpNativeProjectId: $gcpNativeProjectId,
        gcpProjectName: $gcpProjectName,
        gcpProjectNumber: $gcpProjectNumber,
        organizationName: $organizationName,
        serviceAccountJwtConfigOptional: $serviceAccountJwtConfigOptional,
    )
}`

// gcpCloudAccountDeleteProjects GraphQL query
var gcpCloudAccountDeleteProjectsQuery = `mutation SdkGolangGcpCloudAccountDeleteProjects($nativeProtectionProjectId: UUID!) {
    result: gcpCloudAccountDeleteProjects(input: {
        nativeProtectionProjectIds: [$nativeProtectionProjectId],
        sharedVpcHostProjectIds:    [],
        cloudAccountsProjectIds:    [],
        skipResourceDeletion:       true,
    }) {
        gcpProjectDeleteStatuses {
            projectUuid
            success
            error
        }
    }
}`

// gcpCloudAccountDeleteProjectsV0 GraphQL query
var gcpCloudAccountDeleteProjectsV0Query = `mutation SdkGolangGcpCloudAccountDeleteProjectsV0($nativeProtectionProjectUuids: [UUID!]!) {
    gcpCloudAccountDeleteProjects(nativeProtectionProjectUuids: $nativeProtectionProjectUuids, sharedVpcHostProjectUuids: [], cloudAccountsProjectUuids: [], skipResourceDeletion: true) {
        projectUuid
        success
        error
    }
}`

// gcpCloudAccountDeleteProjectsV1 GraphQL query
var gcpCloudAccountDeleteProjectsV1Query = `mutation SdkGolangGcpCloudAccountDeleteProjectsV1($nativeProtectionProjectId: UUID!) {
    gcpCloudAccountDeleteProjects(input: {
        nativeProtectionProjectIds: [$nativeProtectionProjectId],
        sharedVpcHostProjectIds:    [],
        cloudAccountsProjectIds:    [],
        skipResourceDeletion:       true,
    }) {
        projectUuid
        success
        error
    }
}`

// gcpCloudAccountListPermissions GraphQL query
var gcpCloudAccountListPermissionsQuery = `query SdkGolangGcpCloudAccountListPermissions($feature: CloudAccountFeature!) {
    result: gcpCloudAccountListPermissions(feature: $feature){
        permission
    }
}`

// gcpCloudAccountListPermissionsV0 GraphQL query
var gcpCloudAccountListPermissionsV0Query = `query SdkGolangGcpCloudAccountListPermissionsV0($feature: CloudAccountFeatureEnum!) {
    result: gcpCloudAccountListPermissions(feature: $feature){
        permission
    }
}`

// gcpCloudAccountListProjects GraphQL query
var gcpCloudAccountListProjectsQuery = `query SdkGolangGcpCloudAccountListProjects($feature: CloudAccountFeature!, $projectSearchText: String!) {
    result: gcpCloudAccountListProjects(feature: $feature, projectStatusFilters: [], projectSearchText: $projectSearchText) {
        project {
            id
            name
            projectId
            projectNumber
            roleId
            usesGlobalConfig
        }
        featureDetail {
            feature
            status
        }
    }
}`

// gcpCloudAccountListProjectsV0 GraphQL query
var gcpCloudAccountListProjectsV0Query = `query SdkGolangGcpCloudAccountListProjectsV0($feature: CloudAccountFeatureEnum!, $projectSearchText: String!) {
    result: gcpCloudAccountListProjects(feature: $feature, projectStatusFilters: [], projectSearchText: $projectSearchText) {
        project {
            id
            name
            projectId
            projectNumber
            roleId
            usesGlobalConfig
        }
        featureDetail {
            feature
            status
        }
    }
}`

// gcpGetDefaultCredentialsServiceAccount GraphQL query
var gcpGetDefaultCredentialsServiceAccountQuery = `query SdkGolangGcpGetDefaultCredentialsServiceAccount {
    gcpGetDefaultCredentialsServiceAccount
}`

// gcpNativeDisableProject GraphQL query
var gcpNativeDisableProjectQuery = `mutation SdkGolangGcpNativeDisableProject($projectId: UUID!, $shouldDeleteNativeSnapshots: Boolean!) {
  gcpNativeDisableProject(input: {
    projectId:                   $projectId,
    shouldDeleteNativeSnapshots: $shouldDeleteNativeSnapshots
  }) {
    jobId
    error
  }
}`

// gcpNativeDisableProjectV0 GraphQL query
var gcpNativeDisableProjectV0Query = `mutation SdkGolangGcpNativeDisableProjectV0($projectId: UUID!, $shouldDeleteNativeSnapshots: Boolean!) {
  gcpNativeDisableProject(projectId: $projectId, shouldDeleteNativeSnapshots: $shouldDeleteNativeSnapshots) {
    taskchainUuid
  }
}`

// gcpNativeDisableProjectV1 GraphQL query
var gcpNativeDisableProjectV1Query = `mutation SdkGolangGcpNativeDisableProjectV1($projectId: UUID!, $shouldDeleteNativeSnapshots: Boolean!) {
  gcpNativeDisableProject(projectId: $projectId, shouldDeleteNativeSnapshots: $shouldDeleteNativeSnapshots) {
    jobId
  }
}`

// gcpNativeProject GraphQL query
var gcpNativeProjectQuery = `query SdkGolangGcpNativeProject($fid: UUID!) {
    gcpNativeProject(fid: $fid) {
        id
        name
        nativeId
        nativeName
        projectNumber
        organizationName
        slaAssignment
        configuredSlaDomain{
            id
            name
        }
        effectiveSlaDomain{
            id
            name
        }
    }
}`

// gcpNativeProjectConnection GraphQL query
var gcpNativeProjectConnectionQuery = `query SdkGolangGcpNativeProjectConnection($after: String, $filter: String!) {
    result: gcpNativeProjectConnection(after: $after, projectFilters: {nameOrNumberSubstringFilter: {nameOrNumberSubstring: $filter}}){
        count
        edges {
            node {
                id
                name
                nativeId
                nativeName
                projectNumber
                organizationName
                slaAssignment
                configuredSlaDomain{
                    id
                    name
                }
                effectiveSlaDomain{
                    id
                    name
                }
            }
        }
        pageInfo {
            endCursor
            hasNextPage
        }
    }
}`

// gcpNativeProjects GraphQL query
var gcpNativeProjectsQuery = `query SdkGolangGcpNativeProjects($after: String, $filter: String!) {
    result: gcpNativeProjects(after: $after, projectFilters: {nameOrNumberSubstringFilter: {nameOrNumberSubstring: $filter}}){
        count
        edges {
            node {
                id
                name
                nativeId
                nativeName
                projectNumber
                organizationName
                slaAssignment
                configuredSlaDomain{
                    id
                    name
                }
                effectiveSlaDomain{
                    id
                    name
                }
            }
        }
        pageInfo {
            endCursor
            hasNextPage
        }
    }
}`

// gcpSetDefaultServiceAccountJwtConfig GraphQL query
var gcpSetDefaultServiceAccountJwtConfigQuery = `mutation SdkGolangGcpSetDefaultServiceAccountJwtConfig($serviceAccountName: String!, $serviceAccountJwtConfig: String!) {
    gcpSetDefaultServiceAccountJwtConfig(input: {
        serviceAccountJwtConfig: $serviceAccountJwtConfig,
        serviceAccountName:      $serviceAccountName,
    })
}`

// gcpSetDefaultServiceAccountJwtConfigV0 GraphQL query
var gcpSetDefaultServiceAccountJwtConfigV0Query = `mutation SdkGolangGcpSetDefaultServiceAccountJwtConfigV0($serviceAccountName: String!, $serviceAccountJwtConfig: String!) {
    gcpSetDefaultServiceAccountJwtConfig(serviceAccountJWTConfig: $serviceAccountJwtConfig, serviceAccountName: $serviceAccountName)
}`

// upgradeGcpCloudAccountPermissionsWithoutOauth GraphQL query
var upgradeGcpCloudAccountPermissionsWithoutOauthQuery = `mutation SdkGolangUpgradeGcpCloudAccountPermissionsWithoutOauth($cloudAccountId: UUID!, $feature: CloudAccountFeature!) {
    result: upgradeGcpCloudAccountPermissionsWithoutOauth(input: {
        cloudAccountId: $cloudAccountId,
        feature:        $feature
    }) {
        status {
            projectUuid
            success
            error
        }
    }
}`

// upgradeGcpCloudAccountPermissionsWithoutOauthV0 GraphQL query
var upgradeGcpCloudAccountPermissionsWithoutOauthV0Query = `mutation SdkGolangUpgradeGcpCloudAccountPermissionsWithoutOauthV0($cloudAccountId: UUID!, $feature: CloudAccountFeatureEnum!) {
    result: upgradeGcpCloudAccountPermissionsWithoutOauth(input: {
        cloudAccountId: $cloudAccountId,
        feature:        $feature
    }) {
        status {
            projectUuid
            success
            error
        }
    }
}`
