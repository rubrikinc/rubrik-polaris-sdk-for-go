// Code generated by queries_gen.go DO NOT EDIT.

// MIT License
//
// Copyright (c) 2021 Rubrik
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package cloudcluster

// allClustersConnection GraphQL query
var allClustersConnectionQuery = `query SdkGolangAllClustersConnection(
  $first: Int
  $after: String
  $filter: ClusterFilterInput
  $sortBy: ClusterSortByEnum
  $sortOrder: SortOrder
) {
  result: allClusterConnection(
    filter: $filter
    sortBy: $sortBy
    sortOrder: $sortOrder
    first: $first
    after: $after
  ) {
    edges {
      cursor
      node {
        id
        name
        ccprovisionInfo {
          progress
          jobStatus
          jobType
          vendor
        }
        cloudInfo {
          name
          region
          regionId
          networkName
          nativeCloudAccountName
          vendor
          nativeCloudAccountId
          cloudAccount
          storageConfig {
            locationName
            locationId
            isImmutable
            isUsingManagedIdentity
          }
        }
        clusterNodeConnection {
          edges {
            node {
              brikId
              ipAddress
              needsInspection
              cpuCores
              ram
              clusterId
              networkSpeed
              hostname
              id
            }
          }
        }
        productType
        timezone
        version
      }
    }
    pageInfo {
      startCursor
      endCursor
      hasNextPage
      hasPreviousPage
    }
    count
  }
}`

// awsCcCdmVersions GraphQL query
var awsCcCdmVersionsQuery = `query SdkGolangAwsCcCdmVersions($cloudAccountId: String, $region: String) {
  result: allAwsCdmVersions(
    input: { cloudAccountId: $cloudAccountId, region: $region }
  ) {
    version
    isLatest
    productCodes
    supportedInstanceTypes
  }
}`

// awsCcInstanceProfile GraphQL query
var awsCcInstanceProfileQuery = `query SdkGolangAwsCcInstanceProfile($cloudAccountId: String!, $awsRegion: String!) {
  result: allAwsInstanceProfileNames(
    cloudAccountId: $cloudAccountId
    region: $awsRegion
  )
}`

// awsCcRegion GraphQL query
var awsCcRegionQuery = `query SdkGolangAwsCcRegion($cloudAccountId: String!) {
  result: allAwsRegions(cloudAccountId: $cloudAccountId)
}`

// awsCcSecurityGroups GraphQL query
var awsCcSecurityGroupsQuery = `query SdkGolangAwsCcSecurityGroups(
  $cloudAccountId: UUID!
  $awsRegion: AwsRegion!
  $awsVpc: String!
) {
  result: awsCloudAccountListSecurityGroups(
    cloudAccountUuid: $cloudAccountId
    region: $awsRegion
    vpcID: $awsVpc
    feature: SERVERS_AND_APPS
  ) {
    result {
      securityGroupId
      name
    }
  }
}`

// awsCcSubnet GraphQL query
var awsCcSubnetQuery = `query SdkGolangAwsCcSubnet(
  $cloudAccountId: UUID!
  $awsRegion: AwsRegion!
  $awsVpc: String!
) {
  result: awsCloudAccountListSubnets(
    cloudAccountUuid: $cloudAccountId
    region: $awsRegion
    vpcID: $awsVpc
    feature: SERVERS_AND_APPS
  ) {
    result {
      subnetId
      name
    }
  }
}`

// awsCcVpc GraphQL query
var awsCcVpcQuery = `query SdkGolangAwsCcVpc($cloudAccountId: UUID!, $awsRegion: AwsRegion!) {
  result: awsCloudAccountListVpcs(
    cloudAccountUuid: $cloudAccountId
    region: $awsRegion
    feature: SERVERS_AND_APPS
  ) {
    result {
      vpcId
      name
    }
  }
}`

// cloudClusterInstanceProperties GraphQL query
var cloudClusterInstancePropertiesQuery = `query SdkGolangCloudClusterInstanceProperties($input: InstancePropertiesReq!) {
  result: cloudClusterInstanceProperties(input: $input) {
    instanceProperties {
      instanceType
      vendor
      vcpuCount
      memoryGib
      capacityTb
      processorType
      vmType
      instanceTypeString
    }
  }
}`

// clusterDnsServers GraphQL query
var clusterDnsServersQuery = `query SdkGolangClusterDnsServers($clusterUuid: UUID!) {
  result: clusterDns(clusterUuid: $clusterUuid) {
    servers
    domains
  }
}`

// clusterNtpServers GraphQL query
var clusterNtpServersQuery = `query SdkGolangClusterNtpServers($id: String!) {
  result: clusterNtpServers(input: { id: $id }) {
    data {
      server
      symmetricKey {
        key
        keyId
        keyType
      }
    }
  }
}`

// clusterSettings GraphQL query
var clusterSettingsQuery = `query SdkGolangClusterSettings($id: UUID!) {
  result: cluster(clusterUuid: $id) {
    id
    name
    version
    status
    status
    timezone
    geoLocation {
      address
    }
    ipmiInfo {
      isAvailable
      usesHttps
      usesIkvm
    }
  }
}`

// createAwsCloudCluster GraphQL query
var createAwsCloudClusterQuery = `mutation SdkGolangCreateAwsCloudCluster($input: CreateAwsClusterInput!) {
  result: createAwsCluster(input: $input) {
    message
    success
    jobId
  }
}`

// removeAwsCcCluster GraphQL query
var removeAwsCcClusterQuery = `mutation SdkGolangRemoveAwsCcCluster(
  $clusterUuid: UUID!
  $expireInDays: Long
  $isForce: Boolean!
) {
  result: removeCdmCluster(
    clusterUUID: $clusterUuid
    expireInDays: $expireInDays
    isForce: $isForce
  )
}`

// updateClusterNtpServers GraphQL query
var updateClusterNtpServersQuery = `mutation SdkGolangUpdateClusterNtpServers(
  $id: String!
  $server: String!
  $keyId: Int!
  $key: String!
  $keyType: String!
) {
  result: updateClusterNtpServers(
    input: {
      id: $id
      ntpServerConfigs: [
        {
          server: $server
          symmetricKey: { keyId: $keyId, key: $key, keyType: $keyType }
        }
      ]
    }
  ) {
    success
  }
}`

// updateCusterDnsAndSearchDomains GraphQL query
var updateCusterDnsAndSearchDomainsQuery = `mutation SdkGolangUpdateCusterDnsAndSearchDomains(
  $input: UpdateDnsServersAndSearchDomainsInput!
) {
  result: updateDnsServersAndSearchDomains(input: $input) {
    success
  }
}`

// validateAwsClusterCreateRequest GraphQL query
var validateAwsClusterCreateRequestQuery = `query SdkGolangValidateAwsClusterCreateRequest($input: CreateAwsClusterInput!) {
  result: validateCreateAwsClusterInput(input: $input) {
    message
    isSuccessful
  }
}`
